The ``7-base_geometry`` module
======================

Using ``base_geometry``
-------------------

This is a text file in reStructuredText format.  
First import ``base_geometry`` from the ``7-base_geometry`` module:

    00 7-base_geometry exist
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Test cases:

    correct input
    >>> BaseGeometry().integer_validator("my_int", 12)

    correct input
    >>> BaseGeometry().integer_validator("width", 89)

    string as value
    >>> BaseGeometry().integer_validator("name", "John")
    Traceback (most recent call last):
    ...
    TypeError: name must be an integer

    0 as value
    >>> BaseGeometry().integer_validator("age", 0)
    Traceback (most recent call last):
    ...
    ValueError: age must be greater than 0

    negative value
    >>> BaseGeometry().integer_validator("distance", -4)
    Traceback (most recent call last):
    ...
    ValueError: distance must be greater than 0

    missing one argument
    >>> BaseGeometry().integer_validator("distance")
    Traceback (most recent call last):
    ...
    TypeError: integer_validator() missing 1 required positional argument: 'value'


    missing two arguments
    >>> BaseGeometry().integer_validator()
    Traceback (most recent call last):
    ...
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

    empty string value
    >>> BaseGeometry().integer_validator("", 4)


    subtype
    >>> BaseGeometry().integer_validator("width", True)
    Traceback (most recent call last):
    ...
    TypeError: width must be an integer
